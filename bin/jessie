#!/usr/bin/env node
/*jslint node:true, strict:false */

// imports
var program = require('commander'),
	Table = require('cli-table'),
	Set = require('simplesets').Set,
	fs = require('fs'),
	path = require('path'),
	jsp = require("uglify-js").parser,
	pro = require("uglify-js").uglify;

var JessieFunction = require('../builder/libs/jessie/Function.js');
var JessieRendition = require('../builder/libs/jessie/Rendition.js');

program
	.version('0.0.1')
	.usage('[options] <functions ...>')
	.option('-l, --list', 'Print a list of available functions')
	.option('-o, --output [file]', 'The file to output to (outputs to stdout by default)')
	.option('-u, --uglify', 'Minify the output using UglifyJS')
	.option('--mangle', 'Mangle the generated output via UglifyJS')
	.option('--beautify', 'Output beautified JS')
	.option('--root [path]', 'the folder that jessie functions are located in', path.join(__dirname, '../functions/'))
	.option('--no-wrap', 'Don\'nt wrap the built file with the header/footer file contents')
	.option('--exports <list>', 'A comma separated list of internal functions to export (default: [isHostMethod, isHostObjectProperty])', list, ['isHostMethod', 'isHostObjectProperty'])
	.option('--header [path]', 'The header file', path.join(__dirname, '../libraries/header1.inc'))
	.option('--footer [path]', 'The footer file', path.join(__dirname, '../libraries/footer1.inc'))
	.option('--namespace [name]', 'The name of the global variable to export', "jessie")
	.parse(process.argv);

// return contents of header include file
var header = fs.readFileSync(program.header, "utf8");
// return contents of footer include file
var footer = fs.readFileSync(program.footer, "utf8");

// cant grab this from uglifyjs (ast) parser as it's in the closure arguments
// so we specify this here
var HEADER_DECLARATIONS = ["global"];

// parse the header/footer using uglify
var ast = jsp.parse(header + footer);

// walk over the ast looking for `var` declarations to add to HEADER_DECLARATIONS
var w = pro.ast_walker();
ast = w.with_walkers({
	"var": function (defs) {
		defs.forEach(function(def){
			HEADER_DECLARATIONS.push(def[0]);
		});
	}
}, function(){
        return w.walk(ast);
});

for (var i = program.exports.length - 1; i >= 0; i--) {
	if(HEADER_DECLARATIONS.indexOf(program.exports[i]) === -1) {
		throw "Cannot find export: " + program.exports[i];
	}
}

// look in the root directory and get an array of JessieFunctions
// doing this all sync for simplicity at the moment!
var functions = {};
fs.readdirSync(program.root).filter(function(f){
	return fs.statSync(path.join(program.root, f)).isDirectory();
}).forEach(function(f){
	f = new JessieFunction(path.join(program.root, f), JessieRendition);
	functions[f.name] = f;
});

// The list option just outputs a list of all functions in Jessie, then quits
if(program.list) {
	var t = new Table({head: ["Function Name", "Renditions", "Description"], colWidths: [40, 15, 50]});
	Object.keys(functions).forEach(function(f){
		f = functions[f];
		t.push([f.name, range(1, f.renditions.length).join(", "), ""]);
	});
	process.stdout.write(t.toString() + "\n");
	process.exit(0);
}

// will store the jessie functions and which id
// e.g. "attachListener": 1
var requestedFunctions = {};

// if no args are used, output the help
if(program.args.length === 0) {
	process.stdout.write(program.helpInformation());
	program.emit('--help');
	process.exit(0);
}

// parse the args to get a map of functions that we need to output
program.args.forEach(function(arg){
	// each argument can specify the renditions that are required
	// by separating them with colons
	arg = arg.split(":");

	// first part is the function name
	var functionName = arg[0];

	// second part is the renditionId (1 or 2 or 3 etc)
	var renditionId = arg[1];

	if(!renditionId) {
		throw new Error("You must specify a particular rendition e.g. "+functionName+":1");
	}

	if(arg.length > 2) {
		throw new Error("Only one rendition allowed");
	}

	requestedFunctions[functionName] = parseInt(renditionId, 10);
	
	if(!functions[functionName]) {
		throw new Error("Could not find function: " + functionName);
	}
});

// make sure the requestedFunctions object contains all the Functions
// and Renditions that are implied by the starting set of functions
expandDependencies(HEADER_DECLARATIONS, functions, requestedFunctions);

// get the output order of the Functions
var order = sortDependencies(functions, requestedFunctions);

// output some info to stderr
process.stderr.write("The following functions will be included:\n");
order.forEach(function(functionName, i){
	var renditionId = requestedFunctions[functionName];
	process.stderr.write("   " + (i+1) + ":\t" + functionName + " (renditionId=" + renditionId + ")\n");
});

var buffer = [];

if(!program.noWrap) {
	// write the header
	buffer.push(header);
}



// output the actual function contents
order.forEach(function(functionName) {
	var renditionId = requestedFunctions[functionName];
	
	buffer.push("\n\n"+functions[functionName].getContentsForRendition(renditionId) + "\n\n");
});

// output code to export the library to the global scope
buffer.push("\n\nglobal[\"" + program.namespace + "\"] = {\n");
program.exports.concat(order).forEach(function(f, i, l) {
	buffer.push("\t\"" + f + "\": " + f + (i === l.length-1 ? "" : ",") + "\n");
});
buffer.push("};\n");

// write the footer
if(!program.noWrap) {
	buffer.push(footer);
}

if(program.uglify) {
	var ast = jsp.parse(buffer.join("")); // parse code and get the initial AST
	if(program.mangle) {
		ast = pro.ast_mangle(ast); // get a new AST with mangled names
	}
	ast = pro.ast_squeeze(ast); // get an AST with compression optimizations
	buffer = pro.gen_code(ast, {
		beautify: program.beautify
	}); // compressed code here
}

// and actually write the buffer somewhere
if(program.output) {
	var output = fs.createWriteStream(program.output);
	output.once('open', function(){
		for(var chunk in buffer) {
			output.write(buffer[chunk]);
		}
	});
} else {
	for(var chunk in buffer) {
		process.stdout.write(buffer[chunk]);
	}
}


// fin.

function expandDependencies(glob, functions, required){
	var dep, deps = new Set(Object.keys(required));
	while((dep = deps.pop())) {
		functions[dep].getDependencies(required[dep]).each(function(d){
			if(d && !required[d] && !deps.has(d) && glob.indexOf(d) == -1) {

				if(!functions[d]) {
					throw new Error("Could not find function: " + d);
				}
				if(functions[d].renditions.length > 1) {
					throw new Error(d+" is an implied dependency, but requires the rendition to be specified!");
				} else {
					// choose dependency rendition automatic - not sure if right thing right now!
					required[d] = [1];
				}
				deps.add(d);
			}
		});
	}
}

function sortDependencies(functions, required) {
	var graph = [], initialOrder = Object.keys(required);
	initialOrder.forEach(function(f, i){
		graph[i] = {
			edges: functions[f].getDependencies(required[f]).array().map(function(d){
				return initialOrder.indexOf(d);
			}).filter(function(d) {
				return d >= 0;
			})
		};
	});

	// sort the graph, reverse it, then convert it back from index to function names
	return topologicalSort(graph).reverse().map(function(f) {
		return initialOrder[f];
	});
}

function topologicalSort(graph) {
	var numberOfNodes = graph.length;
	var processed = [];
	var unprocessed = [];
	var queue = [];

	function iterate(arr, callback){
		var i;
		for(i=0;i<arr.length;i++){
			callback(arr[i], i);
		}
	}

	function processList(){
		for(var i=0; i<unprocessed.length; i++){
			var nodeid = unprocessed[i];
			if(graph[nodeid].indegrees === 0){
				queue.push(nodeid);
				unprocessed.splice(i, 1); //Remove this node, its all done.
				i--;//decrement i since we just removed that index from the iterated list;
			}
		}

		processStartingPoint(queue.shift());
		if(processed.length<numberOfNodes){
			processList();
		}
	}


	function processStartingPoint(nodeId){
		if(nodeId == undefined){
			throw "You have a cycle!!";
		}
		iterate(graph[nodeId].edges, function(e){
			graph[e].indegrees--;
		});
		processed.push(nodeId);
	}


	function populateIndegreesAndUnprocessed(){
		iterate(graph, function(node, nodeId){
			unprocessed.push(nodeId);
			if(!node.hasOwnProperty('indegrees')){
				node.indegrees = 0;
			}
			iterate(node.edges, function(e){
				if(!graph[e].hasOwnProperty('indegrees')){
					graph[e].indegrees = 1;
				}
				else{
					graph[e].indegrees = graph[e].indegrees + 1;
				}
			});
		});
	}

	populateIndegreesAndUnprocessed();
	processList();
	return processed;
}

function range(start, end) {
	var foo = [];
	for (var i = start; i <= end; i++) {
		foo.push(i);
	}
	return foo;
}

function list(val) {
  return val.split(',');
}